# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sW9YE8jtPudypmcBMi58UD8yvGYjSaFk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC

train=pd.read_csv('/content/train.csv')
test=pd.read_csv('/content/train.csv')



"""**## Explore Data**"""

train.head()

train.tail()

train.shape

train.info()

train.describe()

nu=train.isnull().sum()
nu[nu>0]

sns.heatmap(train.isnull())



"""**# CLEAN DATA**"""

def clean(d):
   d.drop(['Cabin','Name','Ticket','Fare','Embarked'],axis=1,inplace=True)
   d.Age = d.Age.fillna(d.Age.median())
   d.dropna()

clean(train)

clean(test)

sns.heatmap(train.isnull())



"""# **ANALYSIS**"""

gender_mapping = {'male': 0, 'female': 1}
train['Sex'] = train['Sex'].map(gender_mapping)

co=train.corr()

sns.heatmap(co,annot=True,linewidths=.5)

train.Survived.value_counts()

train.Sex.value_counts()

train.Sex.value_counts().plot.pie(autopct='0%.2f%%')

sns.countplot(x='Sex', hue='Survived', data=train)

sns.countplot(x='Pclass', hue='Survived', data=train)

sns.histplot(train.Age)



"""# CREAT MODEL"""

X=train.drop('Survived',axis=1)
y=train['Survived']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



accuracies = []

def all(model):
  model.fit(X_train,y_train)
  pre=model.predict(X_test)
  accuracy = accuracy_score(pre,y_test)
  print(f"Accuracy: {accuracy}")
  accuracies.append(accuracy)

model1=LogisticRegression()
all(model1)

model2=RandomForestClassifier()
all(model2)

model3=GradientBoostingClassifier()
all(model3)

model4=DecisionTreeClassifier()
all(model4)

model5=KNeighborsClassifier()
all(model5)

model6=GaussianNB()
all(model6)

model7=SVC()
all(model7)

Alghoritms=['LogisticRegression','RandomForestClassifier','GradientBoostingClassifier','DecisionTreeClassifier','KNeighborsClassifier','GaussianNB','SVC']

new=pd.DataFrame({'Alghoritms':Alghoritms,'Accuracy':accuracies})

new

modelx=GradientBoostingClassifier()
modelx.fit(X_train,y_train)

lpre=modelx.predict(X_test)



final = test.PassengerId

test = test.reset_index(drop=True)

new_df = pd.DataFrame({'PassengerId': test['PassengerId'][:len(lpre)], 'Survived': lpre})

new_df.to_csv('submission.csv', index=False)